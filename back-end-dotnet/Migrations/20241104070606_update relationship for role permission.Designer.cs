// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using back_end_dotnet;

#nullable disable

namespace back_end_dotnet.Migrations
{
    [DbContext(typeof(DbBlogContext))]
    [Migration("20241104070606_update relationship for role permission")]
    partial class updaterelationshipforrolepermission
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("back_end_dotnet.PermissionEntity", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PermissionId");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("back_end_dotnet.PostEntity", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("post");
                });

            modelBuilder.Entity("back_end_dotnet.RoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RoleId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("back_end_dotnet.RolePermissionEntity", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"));

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PermissionEntityId")
                        .HasColumnType("int");

                    b.Property<int>("RoleEntityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionEntityId");

                    b.HasIndex("RoleEntityId");

                    b.ToTable("role_permission");
                });

            modelBuilder.Entity("back_end_dotnet.RoleUserEntity", b =>
                {
                    b.Property<int>("RoleUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleUserId"));

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RoleEntityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("RoleUserId");

                    b.HasIndex("RoleEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("role_user");
                });

            modelBuilder.Entity("back_end_dotnet.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("back_end_dotnet.PostEntity", b =>
                {
                    b.HasOne("back_end_dotnet.UserEntity", "UserEntity")
                        .WithMany("PostEntities")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("back_end_dotnet.RolePermissionEntity", b =>
                {
                    b.HasOne("back_end_dotnet.PermissionEntity", "PermissionEntity")
                        .WithMany()
                        .HasForeignKey("PermissionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end_dotnet.RoleEntity", "RoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionEntity");

                    b.Navigation("RoleEntity");
                });

            modelBuilder.Entity("back_end_dotnet.RoleUserEntity", b =>
                {
                    b.HasOne("back_end_dotnet.RoleEntity", "RoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end_dotnet.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("back_end_dotnet.UserEntity", b =>
                {
                    b.Navigation("PostEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
